import numpy as np
import pandas as pd


def _removeValues(data, percentage, inplace = False):
    """
    Removes individual values in a pandas dataframe with probabilty percentage
    """

    if inplace:
        dataRemoved = data
    else:
        dataRemoved = data.copy()

    numRows, numCols = data.shape
    for i in range(numCols):
        for j in range(numRows):
            if np.random.uniform() < percentage:
                dataRemoved[i][j] = None


    return dataRemoved

def _removeRows(data, rowPercentage, colPercentage = 1, inplace = False):
    """
    Selects rows with probability rowPercentage, then for each column removes that column
    from that row with probability ColPercentage
    """

    if inplace:
        dataRemoved = data
    else:
        dataRemoved = data.copy()

    numRows, numCols = data.shape
    for j in range(numRows):
        if np.random.uniform() < rowPercentage:
            for i in numCols:
                if np.random.uniform() < colPercentage:
                    dataRemoved[i][j] = None

    return dataRemoved


def nonNullIntersection(dataX, dataY):
    """
    Takes two dataframes and returns the dataframe with rows that contain a null value in
    either dataX or dataY removed. This is so that the row can be used for training ML Powerflow
    """
    Xmask = dataX.isna().any(axis = 1)
    Ymask = dataY.isna().any(axis = 1)
    mask = Xmask & Ymask

    maskedX = dataX[mask]
    maskedY = dataY[mask]

    return maskedX, maskedY

def fillValuesMLPF():


